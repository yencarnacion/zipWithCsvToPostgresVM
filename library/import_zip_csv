#!/usr/bin/python

# Requirements        
#   - apt-get requirements
#        - python-pip
#        - python-virtualenv
#        - python-pandas > 0.14
#        - postgresql-9.3
#        - unzip
#    - pip requirements
#        - sqlalchemy

def import_csv(guid, dbname, user, password, host):
    engine = create_engine('postgresql://'+user+':'+password+'@'+host+'/'+dbname)
    for dirname, dirnames, filenames in os.walk('/tmp/'+guid):
        for filename in filenames:
            if re.search('\.csv$', filename):
                mg = re.match(r'(\w+)\.[Cc][Ss][Vv]$', filename)
                tablename = mg.group(1)  # extract filename into tablename
                f=os.path.join(dirname, filename)
                df = pd.read_csv(f)
                df.to_sql(tablename, engine, if_exists='replace', index=True, chunksize=1000)
    return True 

def get_zip(module, uri, guid):

    # make temp directory
    mkdir_path = module.get_bin_path('mkdir', required=True)
    args = [mkdir_path, '-p', '/tmp/'+guid]
    (rc, stdout, stderr) = module.run_command(args)

    if rc != 0:
        return rc

    # Download zip file
    outputfile = "/tmp/"+guid+"/data.zip"
    curl_path = module.get_bin_path('curl', required=True)
    args = [curl_path, "-o", outputfile, uri]
    (rc, stdout, stderr) = module.run_command(args)

    if rc != 0:
        return rc

    # unzip the zip file
    unzip_path = module.get_bin_path('unzip', required=True)
    args = [unzip_path, outputfile, '-d', '/tmp/'+guid] 
    (rc, stdout, stderr) = module.run_command(args)

    return rc == 0

def main():
    module = AnsibleModule( 
        argument_spec=dict( 
            dbname=dict(required=True), 
            dbuser=dict(required=True),
            dbpassword=dict(required=True),
            dbhost=dict(required=False, type='str', default='localhost'),
            zipuri=dict(required=True)
        ),
        supports_check_mode=False 
    )

    if module.check_mode: 
        module.exit_json(changed=False)

    dbname = module.params['dbname']
    dbuser = module.params['dbuser']
    dbpassword = module.params['dbpassword']
    dbhost = module.params['dbhost']
    zipuri = module.params['zipuri']

    guid = str(uuid.uuid1())
    get_zip(module, zipuri, guid)


    if import_csv(guid, dbname, dbuser, dbpassword, dbhost):
        module.exit_json(changed=True)
    else:
        msg = "Could not import %s" % (zipuri)
        module.fail_json(msg=msg)

from ansible.module_utils.basic import *
import uuid
import os
import re
from sqlalchemy import create_engine
import pandas as pd
main()
